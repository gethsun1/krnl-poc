/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface CustomTokenAuthorityInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "generateKey"
      | "getOpinion"
      | "getSigningKeypairPrivateKey"
      | "getSigningKeypairPublicKey"
      | "isKernelAllowed"
      | "owner"
      | "renounceOwnership"
      | "setKernel"
      | "setOpinionMaker"
      | "setRuntimeDigest"
      | "setSigningKeypair"
      | "setSigningKeypairRetrievalPassword"
      | "setWhitelist"
      | "sign"
      | "transferOwnership"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;

  encodeFunctionData(
    functionFragment: "generateKey",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getOpinion",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getSigningKeypairPrivateKey",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getSigningKeypairPublicKey",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isKernelAllowed",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setKernel",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setOpinionMaker",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setRuntimeDigest",
    values: [BytesLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setSigningKeypair",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setSigningKeypairRetrievalPassword",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setWhitelist",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "sign",
    values: [AddressLike, BytesLike, BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "generateKey",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getOpinion", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getSigningKeypairPrivateKey",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSigningKeypairPublicKey",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isKernelAllowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setKernel", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setOpinionMaker",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRuntimeDigest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSigningKeypair",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSigningKeypairRetrievalPassword",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sign", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface CustomTokenAuthority extends BaseContract {
  connect(runner?: ContractRunner | null): CustomTokenAuthority;
  waitForDeployment(): Promise<this>;

  interface: CustomTokenAuthorityInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  generateKey: TypedContractMethod<[], [void], "nonpayable">;

  getOpinion: TypedContractMethod<
    [kernelId: BigNumberish],
    [[boolean, boolean, string]],
    "view"
  >;

  getSigningKeypairPrivateKey: TypedContractMethod<
    [password: string],
    [string],
    "view"
  >;

  getSigningKeypairPublicKey: TypedContractMethod<
    [],
    [[string, string]],
    "view"
  >;

  isKernelAllowed: TypedContractMethod<
    [kernelId: BigNumberish],
    [boolean],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  setKernel: TypedContractMethod<
    [kernelId: BigNumberish, isAllowed: boolean],
    [void],
    "nonpayable"
  >;

  setOpinionMaker: TypedContractMethod<
    [newOpinionMaker: AddressLike],
    [void],
    "nonpayable"
  >;

  setRuntimeDigest: TypedContractMethod<
    [runtimeDigest: BytesLike, isAllowed: boolean],
    [void],
    "nonpayable"
  >;

  setSigningKeypair: TypedContractMethod<
    [pubKey: BytesLike, privKey: BytesLike],
    [void],
    "nonpayable"
  >;

  setSigningKeypairRetrievalPassword: TypedContractMethod<
    [password: string],
    [void],
    "nonpayable"
  >;

  setWhitelist: TypedContractMethod<
    [kernelNodePubKey: AddressLike, isAllowed: boolean],
    [void],
    "nonpayable"
  >;

  sign: TypedContractMethod<
    [
      senderAddress: AddressLike,
      arg1: BytesLike,
      functionParams: BytesLike,
      kernelParamObjects: BytesLike,
      kernelResponses: BytesLike
    ],
    [[string, string, string, string]],
    "view"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "generateKey"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getOpinion"
  ): TypedContractMethod<
    [kernelId: BigNumberish],
    [[boolean, boolean, string]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getSigningKeypairPrivateKey"
  ): TypedContractMethod<[password: string], [string], "view">;
  getFunction(
    nameOrSignature: "getSigningKeypairPublicKey"
  ): TypedContractMethod<[], [[string, string]], "view">;
  getFunction(
    nameOrSignature: "isKernelAllowed"
  ): TypedContractMethod<[kernelId: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setKernel"
  ): TypedContractMethod<
    [kernelId: BigNumberish, isAllowed: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setOpinionMaker"
  ): TypedContractMethod<[newOpinionMaker: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setRuntimeDigest"
  ): TypedContractMethod<
    [runtimeDigest: BytesLike, isAllowed: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setSigningKeypair"
  ): TypedContractMethod<
    [pubKey: BytesLike, privKey: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setSigningKeypairRetrievalPassword"
  ): TypedContractMethod<[password: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setWhitelist"
  ): TypedContractMethod<
    [kernelNodePubKey: AddressLike, isAllowed: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "sign"
  ): TypedContractMethod<
    [
      senderAddress: AddressLike,
      arg1: BytesLike,
      functionParams: BytesLike,
      kernelParamObjects: BytesLike,
      kernelResponses: BytesLike
    ],
    [[string, string, string, string]],
    "view"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;

  filters: {
    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
  };
}
